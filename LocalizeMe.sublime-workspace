{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"subm",
				"submitBtn"
			],
			[
				"visi",
				"visibility"
			],
			[
				"str",
				"stringify"
			],
			[
				"cord",
				"cord_y"
			],
			[
				"list",
				"listeningRealm"
			],
			[
				"ASM_",
				"ASM_SRCS"
			],
			[
				"ASM",
				"ASM_SRCS"
			],
			[
				"add_custom",
				"add_custom_command"
			],
			[
				"param",
				"paramQueue"
			],
			[
				"show",
				"showInvalidArgs"
			],
			[
				"motors_",
				"motors_cmdProcessParse"
			],
			[
				"motor",
				"motorErr_t"
			],
			[
				"valid",
				"valid_rates"
			],
			[
				"cmd_help",
				"cmd_help_detail"
			],
			[
				"DMA_I",
				"DMA_IRQHandler"
			],
			[
				"last",
				"last_hall"
			],
			[
				"curr",
				"current_motor_faults"
			],
			[
				"las",
				"last_hall"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "var isFree = true;\n\nfunction pointIt(event) {\n  if (isFree) {\n    var offsetPtr = $('#pointer-div').offset();\n    var pos_x = event.offsetX ? (event.offsetX + offsetPtr.left) : event.pageX - offsetPtr.left;\n    var pos_y = event.offsetY ? (event.offsetY + offsetPtr.top) : event.pageY - offsetPtr.top;\n    var mrkElem = $('.marker:first');\n    var offsetVal = mrkElem.width() / 2;\n    mrkElem.offset({\n      top: (pos_y - offsetVal),\n      left: (pos_x - offsetVal)\n    });\n    mrkElem.css(\"visibility\", \"\");\n    $('#form_x').val(pos_x);\n    $('#form_y').val(pos_y);\n  }\n}\n\n// Convert the normalized coordinates for the user's current display settings\n// normalized units are assumed to be in the range from 0 to 1000.\nfunction decLoc(x, y) {\n  var myW = $('#pointer-div').width();\n  var myH = $('#pointer-div').height();\n  var dims = {\n    x: \"\",\n    y: \"\"\n  };\n\n  dims.x = Math.round((x * myW) / 1000);\n  dims.y = Math.round((y * myH) / 1000);\n  return dims;\n}\n\n// encode the location before sending it over the websocket connection\nfunction encLoc(x, y) {\n  var myW = $('#pointer-div').width();\n  var myH = $('#pointer-div').height();\n  var dims = {\n    x: \"\",\n    y: \"\"\n  };\n\n  dims.x = Math.round((x / myW) * 1000);\n  dims.y = Math.round((y / myH) * 1000);\n  return dims;\n}\n\nfunction clearTags() {\n\n}\n\nwindow.onload = function() {\n  if (!window.WebSocket) {\n    //If the user's browser does not support WebSockets, give an alert message\n    alert(\"Your browser does not support the WebSocket API!\");\n  } else {\n\n    // setup the websocket connection\n    var wsurl = \"ws://localhost:5000\";\n    //get status element\n    var connstatus = document.getElementById(\"connectionstatus\");\n    var submitBtn = document.getElementById('submit-btn');\n    // the default realm for our protocol\n    var commRealm = 'robotics';\n    // create the websocket object\n    var webSock = new WebSocket(wsurl, [\"protocolOne\", \"protocolTwo\"]);\n\n    // Handle any errors that occur.\n    webSock.onerror = function(error) {\n      console.log('WebSocket Error: ' + error);\n    };\n\n    webSock.onopen = function(event) {\n      // do stuff when the connection opens\n      console.log(event);\n    };\n\n    webSock.onmessage = function(event) {\n      // parse the packet\n      try {\n        msg = JSON.parse(event.data);\n        if (msg.realm == commRealm) {\n          // create an empty response message initially\n          var res = new Msg('', '', commRealm);\n          var replyNeeded = false;\n          console.log(msg);\n\n          // handle the corresponding event\n          switch (msg.proto) {\n            case \"submit_cords\":\n              // not used client-side\n              break;\n\n            case \"add_user_cords\":\n              var aTags = $('div.tags');\n              // if this is the first addition, create the div wrapper for others\n              if (!aTags.find('div').length) {\n                aTags.append('<div></div>');\n                aTags.find('div').addClass('atags');\n              }\n\n              // clone a placement marker\n              var rootTag = $('.marker:first');\n              rootTag.addClass('marker-user').clone().appendTo(aTags.find('div'));\n              rootTag.removeClass('marker-user');\n\n              // compute our local placement dimensions\n              var dims = decLoc(msg.data.cords.x, msg.data.cords.y);\n              // set the offset\n              $('.marker-user:last').offset({\n                top: dims.y,\n                left: dims.x\n              });\n              console.log(\"Added coordinate to image.\");\n              break;\n\n            case \"renew_num_clients\":\n              $('#num-users').text(msg.data);\n              console.log(\"Updating number of users\");\n              break;\n\n            default:\n              console.log(\"Received unknown protocol message:\");\n              console.log(event.data);\n              break;\n          }\n\n          if (replyNeeded) {\n            // send a reply if we need to by the protocol standards that we defined\n          }\n        }\n        console.log(event.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    webSock.onclose = function(event) {\n      // do stuff when the connection closes\n    };\n\n    submitBtn.onclick = function(e) {\n      var cord_x = document.getElementById(\"form_x\").value;\n      var cord_y = document.getElementById(\"form_y\").value;\n      var image_set = 1;\n\n      // make sure we have valid coordinates to send\n      if (cord_x != null && cord_y != null) {\n        // check to see if the websocket object exists\n        if (webSock) {\n          // encode the dimensions for global normalization\n          var dims = encLoc(cord_x, cord_y);\n          // create our data object to send\n          var data = {\n            cords: dims,\n            set: image_set\n          };\n          // construct a message object, placing the data as the payload\n          var msg = new Msg('submit_cords', data, commRealm);\n          // Send the msg object as a JSON-formatted string.\n          webSock.send(JSON.stringify(msg));\n          // isFree = false;\n        } else {\n          console.log(\"No socket connection\");\n        }\n      } else {\n        console.log(\"No coordinates set\");\n      }\n    };\n\n    // bind the enter key for submission\n    $(document).keypress(function(e) {\n      if (e.which == 13) {\n        submitBtn.click();\n      }\n    });\n\n  }\n}",
			"file": "client/scripts.js",
			"file_size": 5387,
			"file_write_time": 130900645475611051,
			"settings":
			{
				"buffer_size": 5387,
				"line_ending": "Unix"
			}
		},
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 403,
				"line_ending": "Unix"
			}
		},
		{
			"file": "processes.json",
			"settings":
			{
				"buffer_size": 193,
				"line_ending": "Unix",
				"name": "{"
			}
		},
		{
			"contents": "var WebSocketServer = require(\"ws\").Server;\nvar http = require(\"http\");\nvar express = require(\"express\");\nvar app = express();\nvar port = process.env.PORT || 5000;\nvar Msg = require('./msg.js');\n\napp.use(express.static(__dirname + \"/\"));\nvar server = http.createServer(app);\n\nserver.listen(port);\nvar ws = new WebSocketServer({\n	server: server\n});\nconsole.log(\"WebSocket server running on port %d.\", port);\n\nvar listeningRealm = 'robotics';\n\nvar testMsg = new Msg('renew_num_clients', listeningRealm, '3');\nconsole.log(testMsg.prep());\n\nvar connList = [];\n// a new connection gets forwared here\nws.on(\"connection\", function(id) {\n	// add connection object to array of all connections\n	connList.push(id);\n	console.log(\"User with ID of \" + id + \" has connected [%d current connections].\", connList.length);\n\n	var clientUpd = new Msg('renew_num_clients', connList.length, listeningRealm);\n	for (var i = 0; i < connList.length; ++i) {\n		id.send(clientUpd.prep(), function() {});\n	}\n\n	// broadcast to all\n	id.on(\"message\", function(data, flags) {\n		try {\n			msg = JSON.parse(data);\n			if (msg.realm == listeningRealm) {\n				// create an empty response message initially\n				var res = new Msg('', '', listeningRealm);\n				var broadcastNeeded = false;\n\n				// handle the corresponding event\n				switch (msg.proto) {\n					case \"submit_cords\":\n						var info = msg.data;\n						// we copy the receive coordinate info so we can send it to everyone in our realm\n						res.data = info;\n						res.proto = 'add_user_cords';\n						broadcastNeeded = true;\n						console.log(\"Received submission: %dx%d (set %d).\", info.cords.x, info.cords.y, info.set);\n						break;\n\n					case \"add_user_cords\":\n						broadcastNeeded = true;\n						console.log(\"Sending new point to connected users.\");\n						break;\n\n					case \"renew_num_clients\":\n\n						console.log(\"Received invalid packet destined for clients.\");\n						break;\n\n					default:\n						console.log(\"Received unknown protocol message.\");\n						console.log(err);\n						break;\n				}\n\n				// broadcast out the message if needed\n				if (broadcastNeeded) {\n					console.log(\"Sending broadcast messages\");\n					var myId = connList.indexOf(id);\n					for (var i = 0; i < connList.length; ++i) {\n						if (i != myId) {\n							connList[i].send(res.prep(), function ack(err) {\n								if (typeof err !== 'undefined') {\n									// something went wrong\n									console.log(\"ERROR SENDING BROADCAST MESSAGE TO:\\n\" + connList[i]);\n								}\n							});\n						}\n					}\n				}\n			}\n		} catch (err) {\n			console.log(err);\n		}\n	});\n\n	id.on(\"close\", function(idk) {\n		connList.splice(connList.indexOf(id), 1);\n		console.log(\"User with ID of \" + id + \" has disconnected.\");\n	});\n});\n\n// errors are forwarded into here\nws.on(\"error\", function(err) {\n\n});",
			"file": "ws-srv/index.js",
			"file_size": 2761,
			"file_write_time": 130900643927251083,
			"settings":
			{
				"buffer_size": 2761,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<html>\n<head>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n<script src=\"scripts.js\"></script>\n<script src=\"../ws-srv/msg.js\"></script>\n<style>\n#pointer-div {\n    background-image: url(\"gt-aerial-crop.jpg\");\n    background-size: contain;\n    background-repeat: no-repeat;\n    max-width: 3188px;\n    max-height: 2072px;\n    height: 1000px;\n}\n</style>\n</head>\n<body>\n<form name=\"pointform\" method=\"post\">\n<div id=\"pointer-div\" onclick=\"pointIt(event)\">\n<div class=\"tags\">\n<img src=\"marker.png\" class=\"marker\" style=\"position:relative;visibility:hidden;z-index:2;\">\n</div>\n</div>\nCurrent Point:<br>x = <input type=\"text\" id=\"form_x\" size=\"4\" /></br>y = <input type=\"text\" id=\"form_y\" size=\"4\" /></br>\n<input type=\"button\" id=\"submit-btn\" value=\"Submit\" />\n</form>\n<div id=\"num-users\">\n1\n</div>\n</body>\n</html>",
			"file": "client/index.html",
			"file_size": 850,
			"file_write_time": 130900643939331083,
			"settings":
			{
				"buffer_size": 850,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 96.0,
		"last_filter": "instal",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"instl",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/jonathan/Documents/localizeMe"
	],
	"file_history":
	[
		"/home/jonathan/Documents/LocalizeMe/client/gt-aerial.jpg",
		"/home/jonathan/Documents/LocalizeMe/ws-srv/index.js",
		"/home/jonathan/Documents/LocalizeMe/app-ex.js",
		"/home/jonathan/Documents/LocalizeMe/ws-srv/msg.js",
		"/home/jonathan/Desktop/localization/scripts.js",
		"/home/jonathan/Desktop/localization/index.html",
		"/home/jonathan/Documents/node-ws-test/index.js",
		"/home/jonathan/Documents/node-ws-test/msg.js",
		"/home/jonathan/Desktop/localization/localize/views/layout.jade",
		"/home/jonathan/Desktop/localization/localize/views/index.jade",
		"/home/jonathan/Desktop/localization/localize/public/stylesheets/style.css",
		"/home/jonathan/Desktop/localization/localize/bin/www",
		"/home/jonathan/Desktop/localization/localize/public/javascripts/scripts.js",
		"/home/jonathan/Desktop/localization/localize/routes/index.js",
		"/home/jonathan/Desktop/localization/localization.sublime-project",
		"/home/jonathan/Desktop/localization.html",
		"/home/jonathan/Documents/Icosahedron/icosahedron.cc",
		"/home/jonathan/Documents/RSA/RSA_Algorithm.cc",
		"/home/jonathan/Documents/RSA/RSA.cc",
		"/home/jonathan/Documents/ThreadsTransform2D/threadDFT2d.cc",
		"/home/jonathan/Documents/FourierTransform2D/fft2d.cc",
		"/home/jonathan/Documents/robocup-software2/firmware/mbed/mbed-rpc.cmake",
		"/home/jonathan/Documents/robocup-software2/firmware/mbed/CMakeLists.txt",
		"/home/jonathan/Documents/robocup-software2/firmware/common2015/CMakeLists.txt",
		"/home/jonathan/Documents/robocup-software2/firmware/robot2015/src-ctrl/CMakeLists.txt",
		"/home/jonathan/Documents/robocup-software2/firmware/mbed/arm_toolchain.cmake",
		"/home/jonathan/Documents/robocup-software2/firmware/mbed/arm_mbed.cmake",
		"/home/jonathan/Desktop/setup-packages.sh",
		"/home/jonathan/Desktop/dns-force/dns.py",
		"/home/jonathan/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/jonathan/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/jonathan/Desktop/msp432_startup_ccs.c",
		"/home/jonathan/Desktop/msp432p401_euscia0_uart_01.c",
		"/home/jonathan/Desktop/main.c",
		"/home/jonathan/Desktop/install-eagle.sh",
		"/media/jonathan/32ED-064D/lab4-docs/messages",
		"/home/jonathan/Desktop/sudoers",
		"/media/jonathan/32ED-064D/fraggle.c",
		"/media/jonathan/32ED-064D/stream.c",
		"/home/jonathan/Desktop/HOME.TP",
		"/home/jonathan/.cache/.fr-jI3tN1/setup_ssh/install.bat",
		"/home/jonathan/Desktop/book-author-sample/myapp/models.py",
		"/home/jonathan/Desktop/testMPI2.cc",
		"/home/jonathan/Desktop/MPI-example.c",
		"/home/jonathan/Documents/rj-rsvp/index.php",
		"/home/jonathan/Documents/rj-rsvp/templates/confirmation.html",
		"/home/jonathan/Documents/rj-rsvp/css/style.css",
		"/home/jonathan/Documents/rj-rsvp/templates/index.html",
		"/home/jonathan/Documents/rj-rsvp/public/index.html",
		"/home/jonathan/Documents/rj-rsvp/templates/index2.html",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/mpu-6050/mpu-6050.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/neostrip.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/lib/arm_toolchain.cmake",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/CMakeLists.txt",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/main.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/neostrip.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/neocore.s",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/param/param.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/CommModule/CommModule.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/CommModule/CommModule.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/param/param.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/toc/toc.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/toc/toc.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/toc.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/toc.hpp",
		"/home/jonathan/Documents/robocup-software/soccer/BatteryProfile.hpp",
		"/home/jonathan/Documents/robocup-software/soccer/BatteryProfile.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/motors/motors.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/rtos-mgmt/MailHelper.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/motors/motors.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/RTP.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/controller/ControllerTaskThread.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/CommModule/CommTaskThread.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/console/console.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/logger/logger.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/console/ConsoleTaskThread.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/watchdog/watchdog.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ds2411/ds2411.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ds2411/ds2411.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/config/robot.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ds2411/DS2411.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/neopixel.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/BurstSPI_LPC1768.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/neopixel.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/BurstSPI.hpp",
		"/home/jonathan/Downloads/BurstSPI_LPC_X.cpp",
		"/home/jonathan/Downloads/BurstSPI_Unsupported.cpp",
		"/home/jonathan/Documents/robocup-software/build/firmware/robot2015/cpu/CMakeFiles/robot2015_elf.dir/drivers/ws2811/BurstSPI/BurstSPI_LPC1768.cpp.d",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/BurstSPI/BurstSPI.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/BurstSPI/BurstSPI_LPC1768.cpp",
		"/home/jonathan/Documents/robocup-software/build/firmware/robot2015/cpu/CMakeFiles/robot2015_elf.dir/build.make",
		"/home/jonathan/Documents/robocup-software/build/firmware/robot2015/cpu/CMakeFiles/progress.marks",
		"/home/jonathan/Documents/robocup-software/build/firmware/robot2015/cpu/CMakeFiles/mbed_lib_build_tools-complete",
		"/home/jonathan/Documents/robocup-software/build/firmware/robot2015/cpu/CMakeFiles/robot2015_elf.dir/link.txt",
		"/home/jonathan/Documents/robocup-software/build/firmware/robot2015/cpu/CMakeFiles/robot2015_elf.dir/main.cpp.o",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/console/commands.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/console/console.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/mpu-6050/mpu-6050.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/mpu-6050/mpu-6050-defines.hpp",
		"/home/jonathan/.config/sublime-text-2/Packages/SublimeAStyleFormatter/SublimeAStyleFormatter.sublime-settings",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/controller/controller.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/config/pins-ctrl-2015.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/controller/controller.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/controller/controllerTask.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/lpc17xx.h",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/BurstSPI/BurstSPI.h",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/BurstSPI/BurstSPI_KL25Z.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/adc/adc-dma.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/neopixel.h",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/console/commands.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/logger/logger.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/Colors.h",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/WS2811.h",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/WS2811.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/ws2811/LedStrip.h",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/console/console-defines.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/firmware-check/firmware-check.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/rtos-mgmt/mainHelperFuncs.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/rtos-mgmt/FunctionPointerRJ.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/rtos-mgmt/FunctionPointerRJ.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/isr-prop.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/isr-prop.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/mainHelperFuncs.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/mainHelperFuncs.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/radio-state-decode.hpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/utils/radio-state-decode.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/modules/CommModule/CommCtrl.cpp",
		"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu/drivers/cc1201/CC1201Config.hpp"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"/home/jonathan/Documents/robocup-software2/build",
			"/home/jonathan/Documents/robocup-software2",
			"/home/jonathan/Documents/robocup-software/firmware/robot2015/cpu",
			"/home/jonathan/Documents/robocup-software/firmware/robot/cpu"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"}\n",
			"marker",
			"msg",
			"wss",
			"form_x",
			"_x",
			"proj",
			"common2015_INCLUDE_DIRS",
			"rpc_\\w+\\.a",
			"\\.a",
			"rpc",
			"current",
			"PY_LIBS",
			"MBED_RPC_PATH",
			"work",
			"MBED_RPC_PATH",
			"rpc",
			"third_party",
			"tab",
			"packet",
			"opt",
			"ip_len",
			"iphdr",
			"[4-5]",
			"5",
			"ps",
			"udp",
			"injection_string",
			"packet",
			"data",
			"delay",
			"p->",
			"struct",
			"p[\\s]",
			"fraggle",
			"ps",
			"char[\\s]?\\*",
			"jpg",
			"BUILD_MCP23017",
			"PREBUILD_DEPS",
			"robot2015_SRC",
			"append",
			"typeLength",
			"logTask",
			"char*",
			"ENOENT",
			"variableget",
			"crc",
			"logRe",
			"pk.data",
			"pk.size",
			"pk",
			"blockCal",
			"block",
			"xTim",
			"x",
			"LOG_",
			"LOG_DEBUG",
			"p.size ",
			"(.*crtp.*)",
			"p.data",
			"warning",
			"readpr",
			"param",
			"read",
			"paramReadProcess",
			"paramR",
			"EN",
			"size",
			"data",
			"channel",
			"_param_start",
			"islogging",
			"ssp",
			"spi",
			"instance",
			"getR",
			"pad",
			"point",
			"head",
			"pad",
			"read",
			"MPU6050_ACCEL_XOUT_H_REG",
			"char ",
			"MPU6050_PWR_MGMT_1_REG",
			"ACCEL_ZO",
			"ACCEL_YO",
			"ACCEL_XO",
			"0x3b",
			"MPU6050_ACCEL_XOUT_H_REG",
			"0x37",
			"MPU6050_INT_PIN_CFG",
			"MPU6050_TEMP_H_REG",
			"config",
			"if",
			"this",
			"pad",
			"brack",
			"reset",
			"sysStopReq",
			"console",
			"printf",
			"print",
			"spi",
			"set",
			"spi",
			"SSP",
			"CR",
			"SSP",
			"SPI",
			"dummy",
			"Pixel",
			"TPM",
			"dma",
			"info",
			"loglv",
			"for",
			"loglvl",
			"ping",
			"clear",
			"executingIterativeCommand",
			"cmdN",
			"command not",
			"command no",
			"iter",
			"executeIterativeCommand",
			"iterativeCommandHandler",
			"ping"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"ws",
			"pk.payload",
			"pk.payload_size",
			"p.payload_size",
			"//$1",
			"p.payload",
			"uint8_t"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "client/scripts.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5387,
						"regions":
						{
						},
						"selection":
						[
							[
								3642,
								3642
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2448.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 403,
						"regions":
						{
						},
						"selection":
						[
							[
								91,
								91
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "processes.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 193,
						"regions":
						{
						},
						"selection":
						[
							[
								123,
								123
							]
						],
						"settings":
						{
							"auto_name": "{",
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ws-srv/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2761,
						"regions":
						{
						},
						"selection":
						[
							[
								407,
								407
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "client/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 850,
						"regions":
						{
						},
						"selection":
						[
							[
								827,
								827
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "LocalizeMe.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/home/jonathan/Documents/FourierTransform2D/fft2d.cc"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 33.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 185.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
